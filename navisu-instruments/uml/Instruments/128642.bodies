class AisLocatorController
!!!128386.java!!!	AisLocatorController(inout geoViewServices : GeoViewServices)
        ships = new HashMap<>();

        aisLayer = new AisLayer();
        wwd = GeoWorldWindViewImpl.getWW();
        this.layerManager = (LayerManager<Layer>) ((GeoView) geoViewServices.getDisplayService()).getLayerManager();
        this.layerManager.insertGeoLayer(GeoLayer.factory.newWorldWindGeoLayer(aisLayer));

        ais1ES.subscribe(new AIS1Event() {

            @Override
            public <T extends NMEA> void notifyNmeaMessageChanged(T data) {
                AIS1 ais = (AIS1) data;
                int mmsi = ais.getMMSI();
                if (ships.containsKey(mmsi)) {
                    ship = ships.get(mmsi);
                    shipUpdate(ais);
                } else {
                    ship = new Ship(ais.getMMSI(), ais.getImo(), ais.getShipname(),
                            ais.getHeading(), ais.getCog(), ais.getSog(), ais.getRot(),
                            ais.getLatitude(), ais.getLongitude(),
                            ais.getWidth(), ais.getLength(), ais.getDraught(),
                            ais.getShipType(), ais.getNavigationalStatus(), ais.getElectronicPositionDevice(), ais.getCallsign(),
                            ais.getETA(), ais.getDestination(), "");
                    if (ship.getType() == 1 || ship.getType() == 6 || ship.getSog() < 0.2) {
                        shipBuildDefault(ais, 1);
                    } else {
                        shipBuild(ais, 1);
                    }
                    ships.put(mmsi, ship);
                }
            }
        });
        ais2ES.subscribe(new AIS2Event() {

            @Override
            public <T extends NMEA> void notifyNmeaMessageChanged(T data) {
                AIS2 ais = (AIS2) data;
                System.out.println("type : 2");
                int mmsi = ais.getMMSI();
                if (ships.containsKey(mmsi)) {
                    ship = ships.get(mmsi);
                    shipUpdate(ais);
                } else {
                    shipBuild(ais, 2);
                    ships.put(mmsi, ship);
                }
            }
        });
        ais3ES.subscribe(new AIS3Event() {

            @Override
            public <T extends NMEA> void notifyNmeaMessageChanged(T data) {
                AIS3 ais = (AIS3) data;
                System.out.println("type : 3");
                int mmsi = ais.getMMSI();
                if (ships.containsKey(mmsi)) {
                    ship = ships.get(mmsi);
                    shipUpdate(ais);
                } else {
                    shipBuild(ais, 3);
                    ships.put(mmsi, ship);
                }
            }
        });
        ais4ES.subscribe(new AIS4Event() {

            @Override
            public <T extends NMEA> void notifyNmeaMessageChanged(T data) {
                AIS4 ais = (AIS4) data;
                System.out.println("type : 4");
                int mmsi = ais.getMMSI();
                //   if (ships.containsKey(mmsi)) {
                //       tShip = ships.get(mmsi);
                //shipUpdate(ais);
                //   } else {
                // shipBuild4(ais); // faire un buildDefault pour les stations fixes
                ships.put(mmsi, ship);
                //  }
            }
        });
        ais5ES.subscribe(new AIS5Event() {

            @Override
            public <T extends NMEA> void notifyNmeaMessageChanged(T data) {
                AIS5 ais = (AIS5) data;
                int mmsi = ais.getMMSI();
                if (ships.containsKey(mmsi)) {
                    ship = ships.get(mmsi);
                    //   shipUpdate5(ais);
                }
            }
        });

!!!128514.java!!!	shipUpdate(inout ais : AIS135) : void

        ship.setLatitude(ais.getLatitude());
        ship.setLongitude(ais.getLongitude());
        ship.setCog(ais.getCog());
        ship.setHeading(ais.getHeading());
!!!128642.java!!!	shipUpdate5(inout ais : AIS135) : void

        ship.setImo(ais.getImo());
        ship.setCallSign(ais.getCallsign());
        ship.setName(ais.getShipname());
        ship.setType(ais.getShipType());
        ship.setWidth(ais.getWidth());
        ship.setLength(ais.getLength());
        ship.setElectronicPositionDevice(ais.getElectronicPositionDevice());
        ship.setETA(ais.getETA());
        ship.setDraught(ais.getDraught());
        ship.setDestination(ais.getDestination());
!!!128770.java!!!	shipBuild4(inout ais : AIS4) : void

        ship = new Ship(ais.getMMSI(), ais.getLatitude(), ais.getLongitude());
        shipView = new ShipViewFactory(ship, 4).buildDefault();
        //   aisLayer.add(shipView);
!!!128898.java!!!	shipBuildDefault(inout ais : AIS135, in aisType : int) : void

        shipView = (ShipDefaultViewImpl) new ShipViewFactory(ship, aisType).buildDefault();
        aisLayer.add((ShipDefaultViewImpl) shipView);
        subscribe();

!!!129026.java!!!	shipBuild(inout ais : AIS135, in aisType : int) : void

        shipView = (ShipViewImpl) new ShipViewFactory(ship, aisType).build();
        shipView.setHeading(ship.getHeading());
        subscribe();
        aisLayer.add((ShipViewImpl) shipView);

!!!129154.java!!!	subscribe() : void
        ship.latitudeProperty().addListener((ObservableValue<? extends Number> ov, Number t, Number t1) -> {
            shipView.setLatitude(t1.doubleValue());
            wwd.redrawNow();
        });
        ship.longitudeProperty().addListener((ObservableValue<? extends Number> ov, Number t, Number t1) -> {
            shipView.setLongitude(t1.doubleValue());
            wwd.redrawNow();
        });

        ship.cogProperty().addListener((ObservableValue<? extends Number> ov, Number t, Number t1) -> {
            cog = t1.doubleValue();
            shipView.setHeading(cog);
            wwd.redrawNow();
        });
        ship.headingProperty().addListener((ObservableValue<? extends Number> ov, Number t, Number t1) -> {
            heading = t1.doubleValue();
            shipView.setHeading(heading);
            wwd.redrawNow();
        });
        ship.typeProperty().addListener((ObservableValue<? extends Number> ov, Number t, Number t1) -> {
            type = t1.intValue();
            shipView.setType(type);
            wwd.redrawNow();
        });
